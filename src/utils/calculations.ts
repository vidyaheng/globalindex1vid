// ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå calculations.ts ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á

import { FormData, CalculationResults, YearlyCalculationResult } from '../types';
import {
  SURRENDER_RATES_PER_1000,
  CASHBACK_RATES,
  SURRENDER_DIVIDEND_PERCENTAGES,
  DEATH_BENEFIT_RATES
} from './constants';
import { irr as irrFinancial } from 'financial';

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IRR (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
const calculateIRR = (cashflows: number[]): number | null => {
  if (!cashflows || cashflows.length < 2) { return null; }
  const hasNegative = cashflows.some(cf => cf < 0);
  const hasPositive = cashflows.some(cf => cf > 0);
  if (!hasNegative || !hasPositive) { return null; }
  try {
    const rate = irrFinancial(cashflows);
    if (rate === undefined || isNaN(rate) || !isFinite(rate)) { return null; }
    return parseFloat((rate * 100).toFixed(2));
  } catch (error) {
    console.error("Error calculating IRR:", error);
    return null;
  }
};
// --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IRR ---


// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ) ---
export const performCalculations = (
    formData: FormData,
    includeTaxBenefitInIRR: boolean // <-- ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
): CalculationResults => {
  const { age, expectedReturn, taxBase, sumAssured, premium } = formData;
  const yearlyData: YearlyCalculationResult[] = [];
  let accumulatedCashback = 0;
  let totalPremiumPaid = 0;
  let totalTaxBenefit = 0; // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏™‡∏°‡∏≠
  let totalCashback = 0;
  const yearlyExpectedReturnRate = expectedReturn / 100;
  const taxRate = taxBase / 100;
  let actualTotalPremiumPaidToDate = 0;

  // --- Loop ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏£‡∏≤‡∏¢‡∏õ‡∏µ (‡∏õ‡∏µ‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á 16 - ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
  for (let year = 1; year <= 16; year++) {
    const currentAge = age + year - 1;
    const currentPremium = year <= 6 ? premium : 0;
    totalPremiumPaid += currentPremium;
    actualTotalPremiumPaidToDate += currentPremium;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ó‡∏≤‡∏á‡∏†‡∏≤‡∏©‡∏µ (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏°‡∏≠ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    const taxBenefit = currentPremium * taxRate;
    totalTaxBenefit += taxBenefit;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô
    const cashbackRate = CASHBACK_RATES[year] || 0;
    const cashback = cashbackRate * sumAssured;
    totalCashback += cashback;
    const displayAccumulatedCashback = accumulatedCashback + cashback;

    // (‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Dividend, Surrender Value, Death Benefit ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
    const interestFactorComponent = Math.pow(1 + yearlyExpectedReturnRate, year) - 1;
    const nonNegativeInterestFactor = Math.max(0, interestFactorComponent);
    const dividendBase = actualTotalPremiumPaidToDate * 0.8 * nonNegativeInterestFactor;
    const surrenderDividendRate = SURRENDER_DIVIDEND_PERCENTAGES[year] || 0;
    const surrenderDividend = year <= 6 ? 0 : dividendBase * surrenderDividendRate;
    const deathDividend = (year === 1) ? 0 : dividendBase;
    const surrenderRatePer1000 = SURRENDER_RATES_PER_1000[year] || 0;
    let surrenderValue = (sumAssured / 1000) * surrenderRatePer1000;
    if (year === 16) surrenderValue = 0;
    const deathRate = DEATH_BENEFIT_RATES[year] || (DEATH_BENEFIT_RATES[6] ?? 0);
    const deathBenefit = deathRate * sumAssured;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
    let totalSurrenderBenefit = accumulatedCashback + cashback + surrenderValue + surrenderDividend;
    if (year === 16) totalSurrenderBenefit = accumulatedCashback + cashback + surrenderDividend;
    let totalDeathBenefit = accumulatedCashback + deathBenefit + deathDividend;
    if (year !== 16) totalDeathBenefit += cashback;


    // ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏õ‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
    yearlyData.push({
      policyYear: year, age: currentAge, premium: currentPremium,
      taxBenefit, cashback, accumulatedCashback: displayAccumulatedCashback,
      surrenderDividend, surrenderValue, totalSurrenderBenefit,
      deathDividend, deathBenefit, totalDeathBenefit,
    });

    accumulatedCashback = displayAccumulatedCashback;
  } // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Loop ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏õ‡∏µ ---

  // --- üëá ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IRR (Logic ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥) ---
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Array ‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 17 ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (t=0 ‡∏ñ‡∏∂‡∏á t=16)
  const surrenderCashflows: number[] = Array(17).fill(0);
  const deathCashflows: number[] = Array(17).fill(0);

  for (let i = 0; i < 16; i++) {
      const yearData = yearlyData[i];
      const year = yearData.policyYear;

      // ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å (‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô) ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô "‡∏ï‡πâ‡∏ô‡∏õ‡∏µ" (t = year - 1)
      if (yearData.premium > 0) {
          surrenderCashflows[year - 1] -= yearData.premium;
          deathCashflows[year - 1] -= yearData.premium;
      }

      // ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô + ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏†‡∏≤‡∏©‡∏µ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô "‡∏õ‡∏•‡∏≤‡∏¢‡∏õ‡∏µ" (t = year)
      const inflow = yearData.cashback + (includeTaxBenefitInIRR ? yearData.taxBenefit : 0);
      surrenderCashflows[year] += inflow;
      deathCashflows[year] += inflow;
  }

  // ‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πâ‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏ì "‡∏õ‡∏•‡∏≤‡∏¢‡∏õ‡∏µ‡∏ó‡∏µ‡πà 16" (t = 16)
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IRR ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏ß‡∏ô‡∏Ñ‡∏∑‡∏ô, ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏≠ "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏£‡∏ß‡∏°" (‡∏´‡∏±‡∏Å‡∏•‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô)
  const lastYearInflowSurrender = yearlyData[15].cashback + (includeTaxBenefitInIRR ? yearlyData[15].taxBenefit : 0);
  surrenderCashflows[16] = surrenderCashflows[16] - lastYearInflowSurrender + yearlyData[15].totalSurrenderBenefit;
  
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IRR ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï, ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏≠ "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏£‡∏ß‡∏°" (‡∏´‡∏±‡∏Å‡∏•‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô)
  const lastYearInflowDeath = yearlyData[15].cashback + (includeTaxBenefitInIRR ? yearlyData[15].taxBenefit : 0);
  deathCashflows[16] = deathCashflows[16] - lastYearInflowDeath + yearlyData[15].totalDeathBenefit;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IRR ‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
  const irrSurrender = calculateIRR(surrenderCashflows);
  const irrDeath = calculateIRR(deathCashflows);

  return {
    yearlyData,
    totalPremium: totalPremiumPaid,
    totalTaxBenefit,
    totalCashback,
    irrSurrender,
    irrDeath,
  };
}; // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô performCalculations ---